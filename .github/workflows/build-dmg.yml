name: Build macOS and Create DMG

on:
  push:
    tags: ['v*']
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Create build directory
        run: mkdir -p build

      - name: Build archive
        run: |
          xcodebuild -scheme Ice \
            -project Ice.xcodeproj \
            -configuration Release \
            -archivePath $PWD/build/Ice.xcarchive \
            archive \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=NO

      - name: Export .app
        run: |
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>mac-application</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Export the archive
          xcodebuild -exportArchive \
            -archivePath $PWD/build/Ice.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/

      - name: Extract version from tag
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract version from tag (e.g., refs/tags/v1.0.0 -> v1.0.0)
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # For non-tag builds, use commit SHA
            VERSION="build-${GITHUB_SHA:0:7}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create DMG
        run: |
          # Verify the .app exists
          if [ ! -d "build/Ice.app" ]; then
            echo "Error: Ice.app not found in build directory"
            ls -la build/
            exit 1
          fi
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg-contents
          cp -R "build/Ice.app" dmg-contents/
          
          # Create a symbolic link to Applications folder
          ln -s /Applications dmg-contents/Applications
          
          # Create the DMG using hdiutil
          hdiutil create -volname "Ice ${{ steps.version.outputs.VERSION }}" \
            -srcfolder dmg-contents \
            -ov -format UDZO \
            "build/Ice-${{ steps.version.outputs.VERSION }}.dmg"
          
          # Clean up temporary directory
          rm -rf dmg-contents

      - name: Upload DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Ice-DMG-${{ steps.version.outputs.VERSION }}
          path: build/*.dmg

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build/*.dmg
          name: Ice ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ github.token }}
